#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys, os, re, glob
import utilities.installer as installer
installer.installImportNeed()

import fnmatch
import logging
from logging.handlers import RotatingFileHandler
import argparse
import utilities.constantes as cons

from handler.organizeHandler import Organize

basepathlog = cons.basepathlog
loggername = 'organize'
# defaulformatter = "%(asctime)s [%(levelname)s] - %(name)s - %(filename)s:%(lineno)d - %(message)s"s
# defaulformatter = "%(asctime)s [%(levelname)s]%(filename)s[%(funcName)s]:%(lineno)d %(message)s"
defaulformatter = "%(asctime)s [%(levelname)s] [%(funcName)s]:%(lineno)d %(message)s"


loggerfilename = basepathlog+loggername+'.log'



def proccesArgs():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('modo', choices=['serie', 'lista','delete'], help='Define la operacion a realizar')
    parser.add_argument('url', help='Indica la url a organizar')
    parser.add_argument('mirror', help='Indicamos la url donde dejamos los enlaces espejo')
    
    parser.add_argument('--delete', default=False, help='borrado de enlaces simbolicos', action="store_true")
    
    parser.add_argument("-v", "--verbose", help="Mostrar información de depuración", action="store_true")
    parser.add_argument("-t", "--test", help="No ser realizaran acciones [modo test]", action='store_true', default=False)
    parser.add_argument("--cron", help="Se define los parametros para ser lanzado", action="store_true")
    # parser.add_argument("-c", "--config", help="Definimos archivo de configuracion", default="config/config.json")
    parser.add_argument("--loglevel", help="Definimos el nivel de logs", default="INFO", choices=['DEBUG','debug','INFO','info','WARN', 'warn','ERROR', 'error'])
    parser.add_argument("--logfile", help="Definimos archivo de log", default=loggerfilename)
    
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    args = parser.parse_args()
    
    return args

def buildlogger(args):
    global logger
    logger = logging.getLogger(loggername)
    logger.setLevel(logging.getLevelName(args.loglevel.upper()))
    formatter = logging.Formatter(defaulformatter)
    
    # handler = logging.FileHandler(mcbconstants.basepathlog+"mycrylog.out")
    handler = RotatingFileHandler(args.logfile, maxBytes=20000, backupCount=5)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    ch = logging.StreamHandler()
    ch.setFormatter(formatter)        
    logger.addHandler(ch)
    return logger


if __name__ == '__main__':
   
    args=proccesArgs()
    logger=buildlogger(args)
    logger.debug("Argumentos pasados %s",args)
    
    
    # root = '/home/ubuntu/workspace/desa/sandbox.6/Code Black'
    # root = '/home/ubuntu/workspace/desa/sandbox.6'
    
    organize = Organize(logger)
    
    if args.modo == 'serie':
        organize.proccess_serie(args.url,args.mirror, args.delete)
    if args.modo == 'lista':
        organize.proccess(args.url, args.mirror, args.delete)
    if args.modo == 'delete':
        organize.deleteSymbolicsLinks(args.mirror)
    
    
    

