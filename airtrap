#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys, os
import time
import importlib
import logging
from logging.handlers import RotatingFileHandler
import argparse

import utilities.utiles as utiles
import conf.constantes as cons
# import general.builderUtils as builderUtils

# from beans.pluginsBeans import RequestPlugin
# from beans.pluginsBeans import ResponsePlugin

# Custom Exception 
from exception.AirtrapException import AirtrapException

from handler.airtrapHandler import AirTrapHandlerClass


basepathlog = cons.basepathlog
loggername = 'airtrap'
defaulformatter = "%(asctime)s [%(levelname)s] - %(name)s - %(filename)s:%(lineno)d - %(message)s"
loggerfilename = basepathlog+loggername+'.log'

# clases globales para lanzar las operaciones
# global clazz
# clazz = AirTrapHandlerClass()
# global operaciones
# operaciones={'execute':clazz.execute, 'test':clazz.test, 'check':clazz.execute}


def getOperaciones(clazz=None):
    operaciones={'execute':None, 'test':None, 'unique':None,'film':None}
    if clazz is not None:
        for method_name in operaciones:
            try: 
                operaciones[method_name]=getattr(clazz, method_name)
            except:
                continue
    return operaciones


def proccesArgs():
    operaciones = getOperaciones()
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument('mode',  choices=operaciones, help="Define la operacion a realizar")
    parser.add_argument('-serie', nargs="+")
    parser.add_argument('-film', nargs=2)
    
    # Podemos hacer que este argumento no sea obligatorio
    # parser.add_argument('mode',  action='store_const', const='check')
    
    parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS, help='Mostrar este mensaje de ayuda y salir.')
    parser.add_argument("-v", "--verbose", help="Mostrar información de depuración", action="store_true")
    parser.add_argument("-t", "--test", help="No ser realizaran acciones [modo test]", action='store_true', default=False)
    parser.add_argument("--cron", help="Se define los parametros para ser lanzado", action="store_true")
    # parser.add_argument("-c", "--config", help="Definimos archivo de configuracion", default="config/config.json")
    parser.add_argument("--loglevel", help="Definimos el nivel de logs", default="INFO", choices=['DEBUG','debug','INFO','info','WARN', 'warn','ERROR', 'error'])
    parser.add_argument("--logfile", help="Definimos archivo de log", default=loggerfilename)
    
    # # Recuperamos las tareas, segun el parametro pasado anteriormente
    # parser.add_argument("--task", help="Define las tareas a realizar", nargs='+')
    
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    
    args = parser.parse_args()
    
    if args.mode=='unique':
        if args.serie is None:
            raise AirtrapException("No existe serie a buscar, revise paramertros")
            
    
    if args.mode=='test': # si estamos en mode test
        args.test=True
    
    # if args.test:
    #     args.loglevel="DEBUG"
    
    if args.cron:
        args.loglevel="INFO"

    return args


def buildlogger(args):
    global logger
    logger = logging.getLogger(loggername)
    logger.setLevel(logging.getLevelName(args.loglevel.upper()))
    formatter = logging.Formatter(defaulformatter)
    
    # handler = logging.FileHandler(mcbconstants.basepathlog+"mycrylog.out")
    handler = RotatingFileHandler(args.logfile, maxBytes=50000, backupCount=5)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    ch = logging.StreamHandler()
    ch.setFormatter(formatter)        
    logger.addHandler(ch)
    return logger



if __name__ == '__main__':
    
    try:
        # main
        args=proccesArgs()
        logger=buildlogger(args)
        logger.debug("Argumentos pasados %s",args)
        
        clazz = AirTrapHandlerClass(logger)
        operaciones = getOperaciones(clazz)
        utiles.switch(operaciones, args.mode, args)
    except AirtrapException, airError:
        logger.error(str(airError))
    # except Exception, e:
    #     logger.error(e)
    
        
    
