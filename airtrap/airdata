#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys, os
import time
import importlib
import logging
from logging.handlers import RotatingFileHandler
import argparse

import utilities.constantes as cons

from handler.data.databaseairtrap import DatabaseAirTrap

basepathlog = cons.basepathlog
loggername = 'airdata'
defaulformatter = "%(asctime)s [%(levelname)s] - %(name)s - %(filename)s:%(lineno)d - %(message)s"
loggerfilename = basepathlog+loggername+'.log'


def getOperaciones(clazz=None):
    operaciones={'create':None, 'insert':None, 'select':None, 'truncate':None, 'update':None, 'delete':None, 'view_chat_ids':None}
    if clazz is not None:
        for method_name in operaciones:
            try: 
                operaciones[method_name]=getattr(clazz, method_name)
            except:
                continue
    return operaciones


def proccesArgs():
    operaciones = getOperaciones()
    print operaciones
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('mode',  nargs='?', choices=operaciones,  default='select', help='Define la operacion a realizar')
    # parser.add_argument('action', nargs='*', choices=acts, default='clear')  
    parser.add_argument('-id' )
    parser.add_argument('-serie', nargs="+")
    parser.add_argument('-basedatos')
    parser.add_argument('-tabla')
    parser.add_argument('-query')
    
    # Podemos hacer que este argumento no sea obligatorio
    # parser.add_argument('mode',  action='store_const', const='check')
    
    # parser.add_argument('-h', '--help', action='help', default=argparse.SUPPRESS, help='Mostrar este mensaje de ayuda y salir.')
    parser.add_argument("-v", "--verbose", help="Mostrar información de depuración", action="store_true")
    parser.add_argument("-t", "--test", help="No ser realizaran acciones [modo test]", action='store_true', default=False)
    parser.add_argument("--cron", help="Se define los parametros para ser lanzado", action="store_true")
    # parser.add_argument("-c", "--config", help="Definimos archivo de configuracion", default="config/config.json")
    parser.add_argument("--loglevel", help="Definimos el nivel de logs", default="DEBUG", choices=['DEBUG','debug','INFO','info','WARN', 'warn','ERROR', 'error'])
    parser.add_argument("--logfile", help="Definimos archivo de log", default=loggerfilename)
    
    # # Recuperamos las tareas, segun el parametro pasado anteriormente
    # parser.add_argument("--task", help="Define las tareas a realizar", nargs='+')
    
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    
    args = parser.parse_args()
    
    if args.test:
        args.loglevel="DEBUG"
    
    if args.cron:
        args.loglevel="INFO"

    return args


def buildlogger(args):
    global logger
    logger = logging.getLogger(loggername)
    logger.setLevel(logging.getLevelName(args.loglevel.upper()))
    formatter = logging.Formatter(defaulformatter)
    
    # handler = logging.FileHandler(mcbconstants.basepathlog+"mycrylog.out")
    handler = RotatingFileHandler(args.logfile, maxBytes=20000, backupCount=5)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    ch = logging.StreamHandler()
    ch.setFormatter(formatter)        
    logger.addHandler(ch)
    return logger


if __name__ == '__main__':
    
    args=proccesArgs()
    logger=buildlogger(args)
    logger.debug("Argumentos pasados %s",args)
    
    if args.basedatos:
        pattern_database="conf/data/{0}.sqlite3".format(args.basedatos)
        handler = DatabaseAirTrap(pattern_database,logger=logger)
    else:
        handler = DatabaseAirTrap(logger=logger)
    operaciones = getOperaciones()
    logger.debug(args.mode)
    if args.mode == "create":
        logger.debug("create:%s",args.mode)
        # handler.create(args.tabla.upper()) if args.tabla else handler.create()
    if args.mode == "update":
        logger.debug("update:%s",args.mode)
        resp = handler.update(args.serie[0], args.serie[1] if len(args.serie)>1 else "NRS00E00", args.serie[2] if len(args.serie)>2 else "NRS99E99")
        logger.debug("select:%s",args.mode)
        logger.info("%s Filas afectadas en %s ",resp, args.mode)
        handler.select_all(display=True)
    if args.mode == "insert": 
        logger.debug("insert:%s",args.mode)
        resp = handler.insert(args.serie[0], args.serie[1] if len(args.serie)>1 else "NRS00E00", args.serie[2] if len(args.serie)>2 else "NRS99E99")
        logger.info("%s Filas afectadas en %s ",resp, args.mode)
        handler.select_all(display=True)
    if args.mode == "select":
        logger.debug("select:%s",args.mode)
        if args.query:
            logger.info("select:%s",args.query)
            handler.select(args.query, display=True)
        else:
            handler.select_noSkip(display=True)
    if args.mode == "delete":
        logger.debug("delete:%s",args.mode)
        if args.id:
            resp = handler.delete(id=args.id)
        else:
            resp = handler.delete(args.serie[0], args.serie[1] if len(args.serie)>1 else "NR")
        logger.info("%s Filas afectadas en %s ",resp, args.mode)
    if args.mode == "truncate":
        logger.debug("truncate:%s",args.mode)
        handler.truncate()
    if args.mode == 'view_chat_ids':
        logger.debug("view_chat_ids:%s",args.mode)
        handler.view_chat_ids(display=True)
    
        
    